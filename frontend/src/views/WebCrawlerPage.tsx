import { useState, useEffect } from "react";
import SideBar from "../components/SideBar";
import Header from "../components/Header";
import {
  PauseCircle,
  PlayCircle,
  Plus,
  Search,
  X,
  Loader2,
  Folder,
  FolderOpen,
  ChevronDown,
  ChevronRight,
  Copy,
  ExternalLink,
} from "lucide-react";
import HeaderWebCrawler from "../components/WebCrawler/HeaderWebCrawler";
import axiosInstance from "../utils/axiosInstance";

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response ‡∏à‡∏≤‡∏Å backend
interface SearchResult {
  title: string;
  link: string;
  snippet: string;
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô UI
interface CrawlResult {
  id: string;
  url: string;
  title: string;
  snippet: string;
  keywords: string[];
  lastCrawled: string;
}

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Search Session (Folder)
interface SearchSession {
  id: string;
  query: string;
  timestamp: string;
  results: CrawlResult[];
  isExpanded: boolean;
}

function WebCrawlerPage() {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
  const loadFromStorage = () => {
    const savedSessions = localStorage.getItem("crawlerSessions");
    const savedKeywords = localStorage.getItem("crawlerKeywords");

    return {
      sessions: savedSessions ? JSON.parse(savedSessions) : [],
      keywords: savedKeywords ? JSON.parse(savedKeywords) : [],
    };
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage
  const saveToStorage = (sessions: SearchSession[], keywords: string[]) => {
    localStorage.setItem("crawlerSessions", JSON.stringify(sessions));
    localStorage.setItem("crawlerKeywords", JSON.stringify(keywords));
  };

  const storageData = loadFromStorage();

  const [isRunning, setIsRunning] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [keywords, setKeywords] = useState<string[]>(storageData.keywords);
  const [newKeyword, setNewKeyword] = useState("");
  const [searchQuery, setSearchQuery] = useState("");

  const [searchSessions, setSearchSessions] = useState<SearchSession[]>(
    storageData.sessions
  );

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context menu
  const [contextMenu, setContextMenu] = useState<{
    visible: boolean;
    x: number;
    y: number;
    url: string;
  }>({
    visible: false,
    x: 0,
    y: 0,
    url: "",
  });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview modal
  const [previewModal, setPreviewModal] = useState<{
    visible: boolean;
    url: string;
    title: string;
  }>({
    visible: false,
    url: "",
    title: "",
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    saveToStorage(searchSessions, keywords);
  }, [searchSessions, keywords]);

  // ‡∏õ‡∏¥‡∏î context menu ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
  useEffect(() => {
    const handleClick = () =>
      setContextMenu({ visible: false, x: 0, y: 0, url: "" });
    const handleScroll = () =>
      setContextMenu({ visible: false, x: 0, y: 0, url: "" });

    if (contextMenu.visible) {
      document.addEventListener("click", handleClick);
      document.addEventListener("scroll", handleScroll);
      return () => {
        document.removeEventListener("click", handleClick);
        document.removeEventListener("scroll", handleScroll);
      };
    }
  }, [contextMenu.visible]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
  const testConnection = async () => {
    try {
      console.log("üîç Testing API connection...");
      const response = await axiosInstance.get("/crawler/test");
      console.log("‚úÖ API Connection successful:", response.data);
      alert(
        "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÖ\n" + JSON.stringify(response.data, null, 2)
      );
    } catch (error) {
      console.error("‚ùå API Connection failed:", error);
      alert(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://10.119.65.140:8000"
      );
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á context menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Ñ‡πå
  const handleLinkContextMenu = (e: React.MouseEvent, url: string) => {
    e.preventDefault();
    e.stopPropagation();

    setContextMenu({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      url: url,
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå
  const copyLink = () => {
    navigator.clipboard
      .writeText(contextMenu.url)
      .then(() => {
        alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß!");
      })
      .catch(() => {
        // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö browser ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö clipboard API
        const textArea = document.createElement("textarea");
        textArea.value = contextMenu.url;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand("copy");
        document.body.removeChild(textArea);
        alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡πâ‡∏ß!");
      });
    setContextMenu({ visible: false, x: 0, y: 0, url: "" });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
  const openInNewTab = () => {
    window.open(contextMenu.url, "_blank", "noopener,noreferrer");
    setContextMenu({ visible: false, x: 0, y: 0, url: "" });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î preview modal
  const openPreview = (url: string, title: string) => {
    setPreviewModal({
      visible: true,
      url: url,
      title: title,
    });
  };

  const closePreview = () => {
    setPreviewModal({
      visible: false,
      url: "",
      title: "",
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ query ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
  const createUniqueQuery = (
    query: string,
    existingSessions: SearchSession[]
  ): string => {
    const existingQueries = existingSessions.map((session) => session.query);

    if (!existingQueries.includes(query)) {
      return query;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    const today = new Date();
    const dateString = today
      .toLocaleDateString("th-TH", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      })
      .replace(/\//g, ""); // ‡πÅ‡∏õ‡∏•‡∏á 19/07/2568 ‡πÄ‡∏õ‡πá‡∏ô 19072568

    let uniqueQuery = `${query} (${dateString})`;
    let counter = 1;

    // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    while (existingQueries.includes(uniqueQuery)) {
      uniqueQuery = `${query} (${dateString}-${counter})`;
      counter++;
    }

    return uniqueQuery;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Crawler API
  const searchWithCrawler = async (query: string) => {
    setIsSearching(true);
    try {
      console.log("üîç Searching for:", query);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà /v1 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞ config ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      const response = await axiosInstance.get(
        `/crawler/search?query=${encodeURIComponent(query)}`
      );

      console.log("‚úÖ API Response:", response.data);
      const searchResults: SearchResult[] = response.data;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!searchResults || searchResults.length === 0) {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: " + query);
        return;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á API response ‡πÄ‡∏õ‡πá‡∏ô format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
      const newResults: CrawlResult[] = searchResults.map((result, index) => ({
        id: `${Date.now()}-${index}`,
        url: result.link,
        title: result.title,
        snippet: result.snippet,
        keywords: extractKeywords(result.title + " " + result.snippet),
        lastCrawled: new Date().toLocaleString("th-TH"),
      }));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ query ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      const uniqueQuery = createUniqueQuery(query, searchSessions);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Search Session ‡πÉ‡∏´‡∏°‡πà
      const newSession: SearchSession = {
        id: `session-${Date.now()}`,
        query: uniqueQuery,
        timestamp: new Date().toLocaleString("th-TH"),
        results: newResults,
        isExpanded: false,
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Session ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà)
      setSearchSessions((prevSessions) => [newSession, ...prevSessions]);

      console.log("‚úÖ Created new session with", newResults.length, "results");
    } catch (error: unknown) {
      console.error("‚ùå Error calling crawler API:", error);

      // ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API";

      if (error && typeof error === "object" && "response" in error) {
        interface AxiosError {
          response?: {
            status: number;
            data?: { detail?: string };
            statusText: string;
          };
        }
        const axiosError = error as AxiosError;
        // API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏°‡∏µ status code ‡∏ú‡∏¥‡∏î
        errorMessage = `API Error (${axiosError.response?.status}): ${
          axiosError.response?.data?.detail || axiosError.response?.statusText
        }`;
      } else if (error && typeof error === "object" && "request" in error) {
        // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response ‡∏à‡∏≤‡∏Å server
        errorMessage =
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà";
      } else if (error instanceof Error) {
        // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        errorMessage = `Network Error: ${error.message}`;
      }

      alert(errorMessage);
    } finally {
      setIsSearching(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const extractKeywords = (text: string): string[] => {
    const commonTerms = [
      "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
      "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      "‡∏Ç‡πà‡∏≤‡∏ß",
      "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°",
      "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
      "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå",
    ];
    const foundKeywords = commonTerms.filter((term) =>
      text.toLowerCase().includes(term.toLowerCase())
    );
    return foundKeywords.length > 0 ? foundKeywords : ["‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢"];
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î crawler
  const toggleCrawler = async () => {
    if (!isRunning && keywords.length === 0) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
      return;
    }

    if (!isRunning) {
      setIsRunning(true);
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
      for (const keyword of keywords) {
        try {
          await searchWithCrawler(keyword);
          // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ keyword ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
          if (keywords.indexOf(keyword) < keywords.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, 2000)); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          }
        } catch (error) {
          console.error(`Error searching for keyword "${keyword}":`, error);
          // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞ error ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö keyword ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
      }
      setIsRunning(false);
      alert(`‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ${keywords.length} ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡πâ‡∏ß`);
    } else {
      setIsRunning(false);
    }
  };

  const addKeyword = () => {
    if (newKeyword.trim()) {
      // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô keyword ‡πÅ‡∏¢‡∏Å‡πÜ
      const wordsToAdd = newKeyword
        .trim()
        .split(/\s+/) // ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô)
        .filter((word) => word.length > 0) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
        .filter((word) => !keywords.includes(word)); // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å

      if (wordsToAdd.length > 0) {
        setKeywords([...keywords, ...wordsToAdd]);
        setNewKeyword("");
      }
    }
  };

  const removeKeyword = (keywordToRemove: string) => {
    setKeywords(keywords.filter((keyword) => keyword !== keywordToRemove));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö manual
  const handleManualSearch = async () => {
    if (!searchQuery.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
      return;
    }
    await searchWithCrawler(searchQuery.trim());
    setSearchQuery("");
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const clearResults = () => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      setSearchSessions([]);
      localStorage.removeItem("crawlerSessions");
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Session
  const toggleSession = (sessionId: string) => {
    setSearchSessions(
      searchSessions.map((session) =>
        session.id === sessionId
          ? { ...session, isExpanded: !session.isExpanded }
          : session
      )
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Session
  const deleteSession = (sessionId: string) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      setSearchSessions(
        searchSessions.filter((session) => session.id !== sessionId)
      );
    }
  };

  const handleViewDetails = (url: string, title: string) => {
    openPreview(url, title);
  };

  return (
    <div className="min-h-screen bg-slate-900">
      {/* Header */}
      <Header />
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          <SideBar />
          {/* Main Content */}
          <div className="lg:col-span-3 space-y-6">
            <div className="space-y-6">
              {/* Header */}
              <HeaderWebCrawler />
              {/* Control Panel */}
              <div className="bg-slate-800 rounded-lg shadow-lg p-6 border border-slate-700">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-white">
                    ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö
                  </h2>
                  <div className="flex items-center space-x-4">
                    <button
                      onClick={testConnection}
                      className="px-3 py-1 bg-blue-700 text-blue-200 rounded text-sm hover:bg-blue-600 transition-colors"
                    >
                      ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
                    </button>
                    <div className="flex items-center space-x-2">
                      <div
                        className={`w-3 h-3 rounded-full ${
                          isRunning ? "bg-green-400" : "bg-gray-500"
                        }`}
                      ></div>
                      <span className="text-sm text-gray-300">
                        {isRunning
                          ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                          : isSearching
                          ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                          : "‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 gap-6">
                  {/* Manual Search */}
                  <div className="space-y-4">
                    <h3 className="text-md font-medium text-white">
                      ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πà‡∏ß‡∏ô
                    </h3>
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ..."
                        className="flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md focus:ring-2 focus:ring-cyan-500 focus:border-transparent text-white placeholder-gray-400"
                        onKeyPress={(e) =>
                          e.key === "Enter" &&
                          !isSearching &&
                          handleManualSearch()
                        }
                        disabled={isSearching}
                      />
                      <button
                        onClick={handleManualSearch}
                        disabled={isSearching}
                        className="px-4 py-2 bg-cyan-700 text-white rounded-md hover:bg-cyan-600 transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed flex items-center space-x-2"
                      >
                        {isSearching ? (
                          <>
                            <Loader2 className="w-4 h-4 animate-spin" />
                            <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</span>
                          </>
                        ) : (
                          <>
                            <Search className="w-4 h-4" />
                            <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
                          </>
                        )}
                      </button>
                    </div>
                  </div>

                  {/* Crawler Control */}
                  <div className="space-y-4">
                    <h3 className="text-md font-medium text-white">
                      ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    </h3>
                    <button
                      onClick={toggleCrawler}
                      disabled={isSearching}
                      className={`flex items-center space-x-2 px-4 py-2 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${
                        isRunning
                          ? "bg-red-700 hover:bg-red-600 text-white"
                          : "bg-green-700 hover:bg-green-600 text-white"
                      }`}
                    >
                      {isRunning ? (
                        <>
                          <PauseCircle className="w-4 h-4" />
                          <span>‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
                        </>
                      ) : (
                        <>
                          <PlayCircle className="w-4 h-4" />
                          <span>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</span>
                        </>
                      )}
                    </button>
                  </div>

                  {/* Keywords Management */}
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <h3 className="text-md font-medium text-white">
                        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                      </h3>
                      {keywords.length > 0 && (
                        <button
                          onClick={() => setKeywords([])}
                          className="flex items-center gap-1.5 px-3 py-1.5 text-sm bg-red-700/30 text-red-300 rounded-md 
                          hover:bg-red-700/50 hover:text-red-200 transition-all duration-200 border border-red-700/50"
                        >
                          <X className="w-3.5 h-3.5" />
                          <span>‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
                        </button>
                      )}
                    </div>

                    {/* Add new keyword */}
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={newKeyword}
                        onChange={(e) => setNewKeyword(e.target.value)}
                        placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà... (‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ)"
                        className="flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-md focus:ring-2 focus:ring-cyan-500 focus:border-transparent text-white placeholder-gray-400"
                        onKeyPress={(e) => e.key === "Enter" && addKeyword()}
                      />
                      <button
                        onClick={addKeyword}
                        className="px-3 py-2 bg-cyan-700 text-white rounded-md hover:bg-cyan-600 transition-colors"
                      >
                        <Plus className="w-4 h-4" />
                      </button>
                    </div>

                    {/* Keywords list */}
                    <div className="space-y-2">
                      <label className="block text-sm font-medium text-gray-300">
                        ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({keywords.length})
                      </label>
                      <div className="max-h-32 overflow-y-auto">
                        <div className="flex flex-wrap gap-2">
                          {keywords.map((keyword, index) => (
                            <div
                              key={index}
                              className="flex items-center space-x-1 px-3 py-1 bg-slate-600 text-gray-300 rounded-full text-sm border border-slate-500"
                            >
                              <span>{keyword}</span>
                              <button
                                onClick={() => removeKeyword(keyword)}
                                className="text-red-400 hover:text-red-300 transition-colors"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Results Section */}
              <div className="bg-slate-800 rounded-lg shadow-lg p-6 border border-slate-700">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h2 className="text-lg font-semibold text-white">
                      ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                    </h2>
                    <div className="flex items-center space-x-4 text-sm text-gray-400 mt-1">
                      <span>‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {searchSessions.length}</span>
                      <span>
                        ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°:{" "}
                        {searchSessions.reduce(
                          (total, session) => total + session.results.length,
                          0
                        )}
                      </span>
                      {searchSessions.length > 0 && (
                        <span className="text-blue-400">
                          üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Browser
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {searchSessions.length > 0 && (
                      <button
                        onClick={clearResults}
                        className="px-3 py-1 bg-red-700 text-red-200 rounded text-sm hover:bg-red-600 transition-colors"
                      >
                        ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                      </button>
                    )}
                    <Search className="w-4 h-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ URL..."
                      className="px-3 py-1 bg-slate-700 border border-slate-600 rounded-md text-sm text-white placeholder-gray-400"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  {searchSessions.length === 0 ? (
                    <div className="text-center py-12">
                      <p className="text-gray-400 text-lg mb-2">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                      </p>
                      <p className="text-gray-500 text-sm">
                        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                      </p>
                      <p className="text-gray-600 text-xs mt-2">
                        üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô Browser
                      </p>
                    </div>
                  ) : (
                    searchSessions.map((session) => (
                      <div
                        key={session.id}
                        className="border border-slate-600 rounded-lg bg-slate-700"
                      >
                        {/* Session Header (Folder) */}
                        <div
                          className="flex items-center justify-between p-4 cursor-pointer hover:bg-slate-600 transition-colors"
                          onClick={() => toggleSession(session.id)}
                        >
                          <div className="flex items-center space-x-3 flex-1 min-w-0">
                            <div className="flex items-center space-x-2">
                              {session.isExpanded ? (
                                <>
                                  <ChevronDown className="w-4 h-4 text-gray-400" />
                                  <FolderOpen className="w-5 h-5 text-yellow-400" />
                                </>
                              ) : (
                                <>
                                  <ChevronRight className="w-4 h-4 text-gray-400" />
                                  <Folder className="w-5 h-5 text-yellow-400" />
                                </>
                              )}
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-medium text-white truncate break-words">
                                ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "{session.query}"
                              </h3>
                              <div className="flex items-center space-x-4 text-xs text-gray-400 mt-1">
                                <span>{session.results.length} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</span>
                                <span>{session.timestamp}</span>
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                deleteSession(session.id);
                              }}
                              className="px-2 py-1 bg-red-700 text-red-200 rounded text-xs hover:bg-red-600 transition-colors"
                            >
                              ‡∏•‡∏ö
                            </button>
                          </div>
                        </div>

                        {/* Session Results (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ expanded) */}
                        {session.isExpanded && (
                          <div className="border-t border-slate-600 bg-slate-800">
                            {session.results.length === 0 ? (
                              <div className="p-4 text-center text-gray-400">
                                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                              </div>
                            ) : (
                              <div className="space-y-3 p-4">
                                {session.results.map((result) => (
                                  <div
                                    key={result.id}
                                    className="border border-slate-500 rounded-lg p-3 bg-slate-700 hover:shadow-lg transition-shadow"
                                  >
                                    <div className="flex items-start justify-between">
                                      <div className="flex-1 min-w-0">
                                        <h4 className="font-medium text-white text-sm truncate break-words mb-1">
                                          {result.title}
                                        </h4>
                                        <p
                                          className="text-xs text-blue-400 hover:text-blue-300 cursor-pointer mb-1 truncate break-all transition-colors"
                                          onContextMenu={(e) =>
                                            handleLinkContextMenu(e, result.url)
                                          }
                                          onClick={() =>
                                            window.open(
                                              result.url,
                                              "_blank",
                                              "noopener,noreferrer"
                                            )
                                          }
                                          title="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î, ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
                                        >
                                          üîó {result.url}
                                        </p>
                                        <p className="text-xs text-gray-400 mb-2 line-clamp-2 overflow-hidden text-ellipsis break-words">
                                          {result.snippet}
                                        </p>
                                        <div className="flex flex-wrap gap-1 mb-1">
                                          {result.keywords.map(
                                            (keyword, index) => (
                                              <span
                                                key={index}
                                                className={`px-1.5 py-0.5 rounded text-xs border ${
                                                  keyword === "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢"
                                                    ? "bg-yellow-600 text-yellow-100 border-yellow-500"
                                                    : "bg-slate-600 text-gray-300 border-slate-500"
                                                }`}
                                              >
                                                {keyword}
                                              </span>
                                            )
                                          )}
                                        </div>
                                        <p className="text-xs text-gray-500">
                                          ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {result.lastCrawled}
                                        </p>
                                      </div>
                                      <div className="ml-3">
                                        <button
                                          onClick={() =>
                                            handleViewDetails(
                                              result.url,
                                              result.title
                                            )
                                          }
                                          className="px-2 py-1 bg-blue-700 text-blue-200 rounded text-xs hover:bg-blue-600 transition-colors"
                                        >
                                          ‡∏î‡∏π
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Context Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Ñ‡πå */}
      {contextMenu.visible && (
        <div
          className="fixed bg-slate-700 border border-slate-600 rounded-lg shadow-lg py-2 z-50"
          style={{
            left: contextMenu.x,
            top: contextMenu.y,
          }}
          onClick={(e) => e.stopPropagation()}
        >
          <button
            onClick={copyLink}
            className="flex items-center space-x-2 px-4 py-2 text-sm text-white hover:bg-slate-600 w-full text-left transition-colors"
          >
            <Copy className="w-4 h-4" />
            <span>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå</span>
          </button>
          <button
            onClick={openInNewTab}
            className="flex items-center space-x-2 px-4 py-2 text-sm text-white hover:bg-slate-600 w-full text-left transition-colors"
          >
            <ExternalLink className="w-4 h-4" />
            <span>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà</span>
          </button>
        </div>
      )}

      {/* Preview Modal */}
      {previewModal.visible && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg shadow-xl w-full max-w-6xl h-5/6 flex flex-col">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-4 border-b border-slate-600">
              <div className="flex-1 min-w-0">
                <h3 className="text-lg font-semibold text-white truncate">
                  {previewModal.title}
                </h3>
                <p className="text-sm text-blue-400 truncate">
                  {previewModal.url}
                </p>
              </div>
              <div className="flex items-center space-x-2 ml-4">
                <button
                  onClick={() =>
                    window.open(
                      previewModal.url,
                      "_blank",
                      "noopener,noreferrer"
                    )
                  }
                  className="px-3 py-1 bg-blue-700 text-blue-200 rounded text-sm hover:bg-blue-600 transition-colors flex items-center space-x-1"
                >
                  <ExternalLink className="w-4 h-4" />
                  <span>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà</span>
                </button>
                <button
                  onClick={closePreview}
                  className="px-3 py-1 bg-red-700 text-red-200 rounded text-sm hover:bg-red-600 transition-colors flex items-center space-x-1"
                >
                  <X className="w-4 h-4" />
                  <span>‡∏õ‡∏¥‡∏î</span>
                </button>
              </div>
            </div>

            {/* Modal Content */}
            <div className="flex-1 p-4">
              <iframe
                src={previewModal.url}
                className="w-full h-full border border-slate-600 rounded"
                title={previewModal.title}
                sandbox="allow-scripts allow-same-origin allow-forms allow-popups"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default WebCrawlerPage;
