import io
import os
from PIL import Image
from loguru import logger
import re
from pyzbar.pyzbar import decode
import pandas as pd

def has_qr_code(image_data: bytes) -> bool:
    try:
        return len(decode(Image.open(io.BytesIO(image_data)))) > 0
    except Exception:
        return False
    
# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß ---
def save_ocr_results(case_id: int | None, text: str, filename: str) -> None:
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ local"""
    base_dir = "ocr_results"
    case_dir = os.path.join(base_dir, f"case_{case_id}" if case_id else "uncategorized")
    os.makedirs(case_dir, exist_ok=True)
    output_path = os.path.join(case_dir, f"{filename}.txt")
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(text)

def detect_bank(text):
    """Detect bank from OCR text content."""
    text_lower = text.strip().lower()
    words = text.strip().lower().split()

    if words and words[0] == 'scb':
        return 'scb'
    
    elif words and words[0] == 'krungthai':
        return 'krungthai'
    
    elif re.search(r'\bgsb\b', text_lower) or '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô' in text_lower:
        return 'gsb'

    elif (
        (match_kbank_regex := re.search(r'(‡∏à‡∏≤‡∏Å|^)\s*[‡∏ô‡∏™‡∏¢]\.?\s*[\u0E00-\u0E7F\s\.]+‡∏ò\.?‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', text)) or
        (has_kasikorn := '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢' in text_lower) or
        (has_kbank := 'kbank' in text_lower) or
        (has_kplus := 'k+' in text_lower) or
        (has_make := 'ake' in text_lower)
    ):
        # üîç Show what matched
        # if match_kbank_regex:
        #     print("üîç Matched regex: sender name + ‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢")
        #     print("‚Üí", match_kbank_regex.group())
        # elif has_kasikorn:
        #     print("üîç Matched: '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢' in text_lower")
        # elif has_kbank:
        #     print("üîç Matched: 'kbank' in text_lower")
        # elif has_kplus:
        #     print("üîç Matched: 'k+' in text_lower")
        # elif has_make:
        #     print("üîç Matched: 'ake' in text_lower")

        return 'kbank'
    
    elif words and words[0] == 'bangkok':
        return 'bangkok'
    
    else:
        return 'unknown'


def handle_scb(text, image_path):
    print("üîÅ ‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (SCB)")

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    lines = [line.strip() for line in text.split('\n') if line.strip()]

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô datetime
    date_match = re.search(r'‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à(.*?)‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á', text, re.DOTALL)
    date = date_match.group(1).strip() if date_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'
    
    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏à‡∏≤‡∏Å"
    sender_name_match = re.search(r'‡∏à‡∏≤‡∏Å\s*([\u0E00-\u0E7F]+\s[\u0E00-\u0E7F]+\s?[\u0E00-\u0E7F]+)', text)
    sender_name = sender_name_match.group(1) if sender_name_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô'
    
    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏à‡∏≤‡∏Å" (‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á)
    sender_acc_match = re.search(r'((?:x{1,3}[\s-]?){1,2}\d{3,4}-?\d?)', text.lower())
    sender_acc = sender_acc_match.group(1) if sender_acc_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'
    
    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÑ‡∏õ‡∏¢‡∏±‡∏á"
    # ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô.‡∏™. / ‡∏ô‡∏≤‡∏¢ / ‡∏ô‡∏≤‡∏á)
    receiver_name_match = re.search(  r'‡πÑ‡∏õ‡∏¢‡∏±‡∏á\s*((?:[‡∏ô‡∏™‡∏¢]\.?\s*)?(?:[\u0E00-\u0E7F\.]+(?:\s+[\u0E00-\u0E7F]+)*))', text)
    receiver_name = receiver_name_match.group(1).strip() if receiver_name_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö'

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÑ‡∏õ‡∏¢‡∏±‡∏á" (‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á)
    receiver_acc_match = re.search(r'‡πÑ‡∏õ‡∏¢‡∏±‡∏á.*?((?:x{1,3}[\s-]?){1,2}\d{3,4}-?\d?)', text.lower())
    receiver_acc = receiver_acc_match.group(1) if receiver_acc_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"
    
    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
    amount_match = re.search(r'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)', text)
    amount = amount_match.group(1) if amount_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    qr_result = read_qr_code(image_path)

    # debug
    success_index = text.lower().find("‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    if success_index != -1:
        after_success = text[success_index:success_index + 100]
        print("üßæ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à':", after_success)
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'")

    # Output ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å OCR
    print("üë§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:", sender_name)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", sender_acc)
    print("üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", receiver_name)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", receiver_acc)
    print("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", amount)
    print("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:", date)
    print("QR code text:", qr_result)

    return {
        "sender_name": sender_name,
        "sender_bank": "‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå",
        "sender_acc": sender_acc,
        "receiver_name": receiver_name,
        "receiver_bank": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",  # SCB slip ‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        "receiver_acc": receiver_acc,
        "amount": amount,
        "date": date,
        "qr_code_text": qr_result
    }

def handle_krungthai(text, image_path):
    print("üîÅ ‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢")

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    lines = [line.strip() for line in text.split('\n') if line.strip()]

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô datetime
    date_match = re.search(r'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\s+(\d{1,2}\s[‡∏Å-‡∏Æ]{1,5}\.[‡∏Å-‡∏Æ]{1,5}\.\s\d{4}\s\d{2}:\d{2})', text, re.DOTALL)
    date = date_match.group(1).strip() if date_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡∏à‡∏≤‡∏Å" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    sender_segment = text[text.find("‡∏à‡∏≤‡∏Å"):text.find("‡πÑ‡∏õ‡∏¢‡∏±‡∏á") if "‡πÑ‡∏õ‡∏¢‡∏±‡∏á" in text else len(text)]
    # ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô
    sender_name_match = re.search(r'‡∏à‡∏≤‡∏Å\s*((?:[‡∏ô‡∏™‡∏¢]\.?\s*)?(?:[\u0E00-\u0E7F\.]+))', sender_segment)
    sender_name = sender_name_match.group(1).strip() if sender_name_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô'
    # ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô
    sender_bank_match = re.search(r'‡∏à‡∏≤‡∏Å\s+[\u0E00-\u0E7F\s.]+?\s+([\u0E00-\u0E7F]+)', sender_segment)
    sender_bank = sender_bank_match.group(1) if sender_bank_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô'
    # ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô
    sender_acc_match = re.search(r'(?:x{1,3}[\s-]?){1,2}\d{3,4}-?\d?', sender_segment.lower())
    sender_acc = sender_acc_match.group() if sender_acc_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÑ‡∏õ‡∏¢‡∏±‡∏á" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    receiver_segment = text[text.find("‡πÑ‡∏õ‡∏¢‡∏±‡∏á"):text.find("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô") if "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" in text else len(text)]
    # ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    receiver_name_match = re.search(
        r'‡πÑ‡∏õ‡∏¢‡∏±‡∏á\s*((?:‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á)?\s*[\u0E00-\u0E7F]+(?:\s[\u0E00-\u0E7F]+)?)',receiver_segment
    )
    receiver_name = receiver_name_match.group(1).strip() if receiver_name_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö'
    # ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    receiver_bank_match = re.search(r'‡πÑ‡∏õ‡∏¢‡∏±‡∏á\s+[\u0E00-\u0E7F\s.]+?\s+([\u0E00-\u0E7F]+)?\s+([\u0E00-\u0E7F]+)?\s+([\u0E00-\u0E7F]+)', receiver_segment)
    receiver_bank = receiver_bank_match.group(3) if receiver_bank_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö'
    # ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    receiver_acc_match = re.search(r'(?:x{1,3}[\s-]?){1,2}\d{3,4}-?\d?', receiver_segment.lower())
    receiver_acc = receiver_acc_match.group() if receiver_acc_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    amount_match = re.search(r'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)', text)
    amount = amount_match.group(1) if amount_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    qr_result = read_qr_code(image_path)

    # Output ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print("sender_segment:", sender_segment)
    print("receiver_segment:", receiver_segment)
    print("üë§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:", sender_name)
    print("   ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", sender_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", sender_acc)
    print("üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", receiver_name)
    print("   ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", receiver_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", receiver_acc)
    print("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", amount)
    print("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:", date)
    print("QR code text:", qr_result)

    # Return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return {
        'sender_name': sender_name,
        'sender_bank': sender_bank,
        'sender_acc': sender_acc,
        'receiver_name': receiver_name,
        'receiver_bank': receiver_bank,
        'receiver_acc': receiver_acc,
        'amount': amount,
        'date' : date,
        "qr_code_text": qr_result
    }

def handle_gsb(text, image_path):
    print("üîÅ ‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô (GSB)")

    # Sender name
    sender_name_match = re.search(r'‡∏à‡∏≤‡∏Å\s+([‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô.‡∏™.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß]*[\u0E00-\u0E7F\s]+?)\s+‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô', text)
    sender_name = sender_name_match.group(1).strip() if sender_name_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô datetime
    date_match = re.search(r'‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:\s+(\d{10,20}[^\w\d]?\d{5,20})\s+(\d{1,2}[‡∏Å-‡∏Æ]{1,5}\.[‡∏Å-‡∏Æ]{1,5}\.\s\d{4}\s\d{2}:\d{2})', text, re.DOTALL)
    date = date_match.group(2).strip() if date_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'

    # Sender bank
    sender_bank = "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô" if "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô" in text else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # Sender account
    sender_acc_match = re.search(r'‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô\s+(\d{4}x{4,}[\d]+)', text)
    sender_acc = sender_acc_match.group(1) if sender_acc_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # Receiver name: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" ‡πÅ‡∏•‡∏∞‡∏°‡∏µ . ‡∏´‡∏£‡∏∑‡∏≠ ~ ‡∏Ñ‡∏±‡πà‡∏ô
    receiver_name_match = re.search(
        r'‡∏ñ‡∏∂‡∏á\s+([‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß]*[\u0E00-\u0E7F\s.]+?)\s+(?:‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô)?\s*(?:‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢)',
        text
    )
    receiver_name = receiver_name_match.group(1).strip() if receiver_name_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver bank
    receiver_bank_match = re.search(r'(‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô)?\s*(‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢)', text)
    receiver_bank = receiver_bank_match.group(0).strip() if receiver_bank_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver account: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, '‡πÄ‡∏≤‡∏á', ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ space ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á
    receiver_acc_match = re.search(
        r'(?:‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå|‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢)[\s\w]*?(\d{4}x{4,}[\d]+)', text
    )
    receiver_acc = receiver_acc_match.group(1) if receiver_acc_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Amount
    amount_match = re.search(r'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)', text)
    amount = amount_match.group(1) if amount_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    qr_result = read_qr_code(image_path)

    # Output ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å OCR
    print("üë§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:", sender_name)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", sender_acc)
    print("üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", receiver_name)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", receiver_acc)
    print("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", amount)
    print("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:", date)
    print("QR code text:", qr_result)

    return {
        "sender_name": sender_name,
        "sender_bank": "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô",
        "sender_acc": sender_acc,
        "receiver_name": receiver_name,
        "receiver_bank": receiver_bank,
        "receiver_acc": receiver_acc,
        "amount": amount,
        "date": date,
        "qr_code_text": qr_result
    }

def handle_kbank(text, image_path): 
    print("üîÅ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ (KBank)")

    # Sender name
    sender_name_match = re.search(
        r'(?:‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á)\s*[\u0E00-\u0E7F]+\s[\u0E00-\u0E7F\.]+',
        text
    )
    sender_name = sender_name_match.group() if sender_name_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô datetime
    date_match = re.search(r'‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à(.*?\‡∏ô.)', text, re.DOTALL)
    date = date_match.group(1).strip() if date_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'

    # Sender bank (assume first ‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ after sender name)
    sender_bank_match = re.search(
        r'{}[\s.]*‡∏ò\.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢'.format(re.escape(sender_name)),
        text
    )
    sender_bank = "‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢" if sender_bank_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # Sender account (first masked pattern)
    sender_acc_match = re.search(
        r'(?:x{1,3}[\s\-]?){1,3}\d{3,4}-?(?:\d|x)?',
        text.lower()
    )
    sender_acc = sender_acc_match.group() if sender_acc_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # Receiver name (second name after first account)
    receiver_name_match = re.findall(
        r'(?:‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á)\s*[\u0E00-\u0E7F]+\s[\u0E00-\u0E7F\.]+',
        text
    )
    receiver_name = receiver_name_match[1] if len(receiver_name_match) > 1 else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver bank (second ‡∏ò.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢)
    receiver_bank_match = re.findall(
        r'‡∏ò\.‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢',
        text
    )
    receiver_bank = receiver_bank_match[1] if len(receiver_bank_match) > 1 else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver account (second masked pattern)
    receiver_acc_match = re.findall(
        r'(?:x{1,3}[\s\-]?){1,3}\d{3,4}-?(?:\d|x)?',
        text.lower()
    )
    receiver_acc = receiver_acc_match[1] if len(receiver_acc_match) > 1 else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Amount
    amount_match = re.search(
        r'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:\s*([\d,]+\.\d{2})',
        text
    )
    amount = amount_match.group(1) if amount_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    qr_result = read_qr_code(image_path)

    # Output
    print("üë§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:", sender_name)
    print("   ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", sender_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", sender_acc)
    print("üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", receiver_name)
    print("   ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", receiver_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", receiver_acc)
    print("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", amount)
    print("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:", date)
    print("QR code text:", qr_result)

    return {
        "sender_name": sender_name,
        "sender_bank": "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢",
        "sender_acc": sender_acc,
        "receiver_name": receiver_name,
        "receiver_bank": receiver_bank,
        "receiver_acc": receiver_acc,
        "amount": amount,
        "date": date,
        "qr_code_text": qr_result
    }

def handle_bangkok(text, image_path): 
    print("üîÅ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û")

    # Sender name
    sender_name_match = re.search(r'‡∏à‡∏≤‡∏Å\s+(‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á)\s*([\u0E00-\u0E7F]+)', text)
    sender_name = f"{sender_name_match.group(1)} {sender_name_match.group(2)}" if sender_name_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # ‡πÉ‡∏ä‡πâ re ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà "‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô datetime
    date_match = re.search(r'‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à(.*?)‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', text, re.DOTALL)
    date = date_match.group(1).strip() if date_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'

    # Sender account (look for 3-digit + dash + masked)
    sender_acc_match = re.search(r'‡∏à‡∏≤‡∏Å.*?(\d{3}-\d(?:[\s\-]?[x\d]{3,6}))', text.lower())
    sender_acc = sender_acc_match.group(1) if sender_acc_match else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ'

    # Sender bank
    sender_bank = "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" if "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" in text else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô"

    # Receiver name (match first Thai full name after '‡πÑ‡∏õ‡∏ó‡∏µ‡πà')
    receiver_name_match = re.search(r'‡πÑ‡∏õ‡∏ó‡∏µ‡πà.*?(‡∏ô\.‡∏™\.|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á)?\s*([\u0E00-\u0E7F\s]+?)\s+\d{3}', text)
    receiver_name = f"{receiver_name_match.group(1)} {receiver_name_match.group(2).strip()}" if receiver_name_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver account
    receiver_acc_match = re.search(r'‡∏à‡∏≤‡∏Å.*?(\d{3}-\d(?:[\s\-]?[x]{1,3}){0,2}[\s\-]?\d{2,4})', text.lower())
    receiver_acc = receiver_acc_match.group(1) if receiver_acc_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"

    # Receiver bank
    receiver_bank_match = re.search(r'‡πÑ‡∏õ‡∏ó‡∏µ‡πà.*?(‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£[\u0E00-\u0E7F]+)', text)
    receiver_bank = receiver_bank_match.group(1) if receiver_bank_match else ("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" if "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå" in text else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")

    # Amount
    amount_match = re.search(r'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)', text)
    amount = amount_match.group(1) if amount_match else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    qr_result = read_qr_code(image_path)

    # Output
    print("üë§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô:", sender_name)
    print("   ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:", sender_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", sender_acc)
    print("üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", receiver_name)
    print("   ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:", receiver_bank)
    print("   ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", receiver_acc)
    print("üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", amount)
    print("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:", date)
    print("QR code text:", qr_result)

    return {
        "sender_name": sender_name,
        "sender_bank": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
        "sender_acc": sender_acc,
        "receiver_name": receiver_name,
        "receiver_bank": receiver_bank,
        "receiver_acc": receiver_acc,
        "amount": amount,
        "date": date,
        "qr_code_text": qr_result
    }

def handle_unknown(text, image_path): 
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏î‡πâ")

# Additional Functions
def log_data(file_name, bank, sender_name, sender_bank, sender_acc, receiver_name, receiver_bank, receiver_acc, amount):
    row = [
        file_name,
        bank,
        sender_name,
        sender_bank,
        sender_acc,
        receiver_name,
        receiver_bank,
        receiver_acc,
        amount
    ]
    row
    return row


def read_qr_code(image_path):
    """‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô QR (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    if not os.path.exists(image_path):
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û"

    try:
        img = Image.open(image_path)
        decoded_objects = decode(img)

        if not decoded_objects:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code"
        return decoded_objects[0].data.decode("utf-8")

    except Exception as e:
        return f"Error: {str(e)}"