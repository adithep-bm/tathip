#!/usr/bin/env python3
"""
Test script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Playwright ‡∏ö‡∏ô Windows
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ NotImplementedError
"""

import asyncio
import platform
from playwright.async_api import async_playwright
from loguru import logger


async def test_playwright_windows():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Playwright ‡∏ö‡∏ô Windows ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ event loop
    """
    logger.info(f"üîç Testing Playwright on {platform.system()} {platform.release()}")

    # ‡∏õ‡∏£‡∏±‡∏ö event loop policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
    if platform.system() == "Windows":
        try:
            # ‡πÉ‡∏ä‡πâ ProactorEventLoop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
            logger.info("‚úÖ Set Windows ProactorEventLoopPolicy")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not set event loop policy: {e}")

    try:
        async with async_playwright() as p:
            logger.info("üöÄ Launching Chromium browser...")

            # Browser args ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
            browser_args = [
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--no-first-run",
                "--no-default-browser-check",
                "--disable-extensions",
                "--disable-plugins",
                "--disable-web-security",
                "--ignore-certificate-errors",
            ]

            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows ‡πÄ‡∏û‡∏¥‡πà‡∏° args ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if platform.system() == "Windows":
                browser_args.extend(
                    ["--disable-features=VizDisplayCompositor", "--single-process"]
                )

            browser = await p.chromium.launch(headless=True, args=browser_args)

            logger.info("‚úÖ Browser launched successfully!")

            page = await browser.new_page()
            logger.info("‚úÖ New page created!")

            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏á‡πà‡∏≤‡∏¢‡πÜ
            test_url = "https://www.google.com"
            logger.info(f"üì° Testing navigation to: {test_url}")

            await page.goto(test_url, timeout=10000)
            logger.info("‚úÖ Navigation successful!")

            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö screenshot
            logger.info("üì∑ Testing screenshot...")
            screenshot_bytes = await page.screenshot(type="png")
            logger.info(f"‚úÖ Screenshot taken! Size: {len(screenshot_bytes)} bytes")

            await browser.close()
            logger.info("üîí Browser closed successfully!")

            return True

    except NotImplementedError as e:
        logger.error(f"‚ùå NotImplementedError: {e}")
        logger.error("üí° This suggests an issue with asyncio subprocess on Windows")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error: {type(e).__name__}: {e}")
        return False


def run_test():
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ test ‡πÉ‡∏ô event loop ‡πÉ‡∏´‡∏°‡πà
    """
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á event loop ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
    if platform.system() == "Windows":
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(test_playwright_windows())
        finally:
            loop.close()
    else:
        return asyncio.run(test_playwright_windows())


if __name__ == "__main__":
    logger.info("üß™ Starting Playwright Windows test...")
    success = run_test()

    if success:
        logger.info("üéâ Playwright test completed successfully!")
    else:
        logger.error("üí• Playwright test failed!")
        logger.info("üí° Possible solutions:")
        logger.info(
            "1. Install/reinstall Playwright browsers: poetry run python -m playwright install"
        )
        logger.info("2. Try running with different Python version")
        logger.info("3. Check Windows Subsystem for Linux (WSL) as alternative")
